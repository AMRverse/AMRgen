[{"path":"https://interpretamr.github.io/AMRgen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthijs S. Berends. Author, maintainer. Natacha Couto. Author. Zoe . Dyson. Author. Jane Hawkey. Author. Kat Holt. Author.","code":""},{"path":"https://interpretamr.github.io/AMRgen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berends MS, Couto N, Dyson ZA, Hawkey J, Holt K (2025). AMRgen: Genotype-Phenotype Integration Antimicrobial Resistance Research. R package version 0.0.0.9000, https://github.com/interpretAMR/AMRgen, https://interpretAMR.github.io/AMRgen/.","code":"@Manual{,   title = {AMRgen: Genotype-Phenotype Integration for Antimicrobial Resistance Research},   author = {Matthijs S. Berends and Natacha Couto and Zoe A. Dyson and Jane Hawkey and Kat Holt},   year = {2025},   note = {R package version 0.0.0.9000, https://github.com/interpretAMR/AMRgen},   url = {https://interpretAMR.github.io/AMRgen/}, }"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"amrgen","dir":"","previous_headings":"","what":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"R Package Genetic Phenotypic Resistance Interpretation","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"AMRgen open-source R package designed bridge gap genotypic phenotypic antimicrobial resistance (AMR) data. Developed extension AMR R package, provides tools interpret AMR genes, integrate findings antimicrobial susceptibility test (AST) data, calculate genotype-phenotype associations. package developed collaboration ESGEM-AMR Working Group tailored researchers healthcare professionals tackling AMR globally.","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"Import Genotype Phenotype Data: Import common formats (NCBI AST phenotypes; AMRfinderplus hAMRonization genotypes Genotype-Phenotype Integration: Links AMR gene presence phenotypic resistance profiles, enabling deeper insights resistance mechanisms. Automated EUCAST MIC Distribution Integration: Fetch MIC distribution data directly EUCAST seamless comparison local susceptibility data. Visualisation: Generate powerful UpSet plots identify intersections AMR gene presence phenotypic resistance, highlighting multidrug resistance patterns. Modular Extensible: Leverages robust foundation AMR package, including antibiotic selectors clinical breakpoint interpretations. Planned development - NCBI-Compliant Export: Export phenotype data NCBI-compliant antibiogram format. - Expanded Data Import: Import parse phenotype data tools (e.g. CARD, ResFinder).","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"install explore package, follow instructions :","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"installation","dir":"","previous_headings":"Getting Started","what":"Installation","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"Note package requires latest version AMR package (still beta). Install latest version AMR package : install package best restart R running installation. didn’t /encounter issues examples install, may help also restart install start fresh examples .","code":"install.packages(\"remotes\") # if you haven't already remotes::install_github(\"msberends/AMR\") # Install from GitHub remotes::install_github(\"interpretAMR/AMRgen\")"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage Examples","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"library(AMRgen) library(tidyverse)"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"import-pheno-data-from-ncbi-ast-and-geno-data-amrfinderplus-output-and-compare-genopheno-for-drugs-of-interest","dir":"","previous_headings":"Usage Examples","what":"Import pheno data (from NCBI AST) and geno data (AMRfinderplus output), and compare geno/pheno for drugs of interest","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"# small example E. coli AST data from NCBI ecoli_ast_raw  # import without re-interpreting resistance pheno <- import_ncbi_ast(ecoli_ast_raw)  # small example E. coli AMRfinderplus data ecoli_geno_raw  # import AMRfinderplus data geno <- import_amrfp(ecoli_geno_raw %>% head(n=10), \"Name\")"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"import-small-example-e-coli-ast-data-from-ncbi-and-re-interpret-resistance-and-ecoff-using-amr-package","dir":"","previous_headings":"Usage Examples","what":"Import small example E. coli AST data from NCBI, and re-interpret resistance and ECOFF using AMR package","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"(WARNING: phenotype interpretation can take minutes)","code":"pheno <- import_ncbi_ast(ecoli_ast_raw, interpret = T, ecoff=T)"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"investigate-ciprofloxacin-resistance-vs-quinolone-genotype-markers-via-solo-ppv-and-upset-plots","dir":"","previous_headings":"Usage Examples","what":"Investigate ciprofloxacin resistance vs quinolone genotype markers, via solo PPV and upset plots","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"# larger example E. coli AST data from NCBI, already imported (with import_ncbi_ast) and re-interpreted (with as.sir) ecoli_ast  # import matching AMRfinderplus data ecoli_geno <- import_amrfp(ecoli_geno_raw, \"Name\")  # find genomes with just one quinolone resistance marker, then estimate and plot positive predictive value (PPV) for ciprofloxacin resistance/NWT # (using phenotypes interpreted with AMR package; alternatively set sir_col=\"Resistance phenotype\" to use the classifications from the raw NCBI AST file) soloPPV_cipro <- solo_ppv_analysis(ecoli_geno, ecoli_ast, antibiotic=\"Ciprofloxacin\", drug_class_list=c(\"Quinolones\"), sir_col=\"pheno\")  # view PPV summary statistics: soloPPV_cipro$solo_stats  # get matrix combining data on ciprofloxacin phenotype (MIC, plus binary R and NWT) and genotype (binary presence/absence for quinolone resistance markers) cip_bin<- get_binary_matrix(ecoli_geno, ecoli_ast, antibiotic=\"Ciprofloxacin\", drug_class_list=c(\"Quinolones\"), sir_col=\"pheno\", keep_assay_values=T, keep_assay_values_from = \"mic\")  # do upset plot of MIC vs genotype marker combinations (using complexUpset) amr_complexUpset(cip_bin)  # do upset plot of MIC vs genotype marker combinations (using AMRgen function, not requiring complexUpset) amr_upset(cip_bin, min_set_size=2, order=\"mic\")"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"explore-logistic-regression-models-of-genotype-vs-phenotype","dir":"","previous_headings":"Usage Examples","what":"Explore logistic regression models of genotype vs phenotype","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"# get binary matrix ecoli_geno <- import_amrfp(ecoli_geno_raw, \"Name\") cip_bin<- get_binary_matrix(ecoli_geno, ecoli_ast, antibiotic=\"Ciprofloxacin\", drug_class_list=c(\"Quinolones\"), sir_col=\"pheno\")  # logistic regression model for ciprofloxacin resistance (R vs S/I), predicted from all detected markers associated with quinolone resistance model <- logistf::logistf(R ~ ., data=cip_bin %>% select(-c(id,pheno,NWT))) model_summary <- logistf_details(model) plot_estimates(model_summary)  # include only markers observed in at least 10 samples model <- logistf::logistf(R ~ ., data=cip_bin %>% select(-c(id,pheno,NWT)) %>% select_if(funs(sum(.)>10))) model_summary <- logistf_details(model) plot_estimates(model_summary, title=\"Logistic regression on Cipro R\")  # predict NWT (defined by ECOFF) rather than R model_NWT <- logistf::logistf(NWT ~ ., data=cip_bin %>% select(-c(id,pheno,R)) %>% select_if(funs(sum(.)>10))) model_NWT_summary <- logistf_details(model_NWT) plot_estimates(model_NWT_summary, title=\"Logistic regression on Cipro NWT\")  # compare estimates for R and NWT (on a single plot) compare_estimates(model_summary, model_NWT_summary, single_plot = T, title1=\"R\", title2=\"NWT\", title=\"R and NWT for Cipro\")  # compare estimates for R and NWT (two plots, side-by-side) compare_estimates(model_summary, model_NWT_summary, single_plot = F, title1=\"R\", title2=\"NWT\", title=\"R and NWT for Cipro\")  # organise layout using patchwork library(patchwork) compare_estimates(model_summary, model_NWT_summary, single_plot = F, title1=\"R\", title2=\"NWT\", title=\"R and NWT for Cipro\") + plot_layout(guides=\"collect\", axes=\"collect\")  # do logistic regression analysis for ciprofloxacin R and NWT vs quinolone associated markers present in ≥50 samples and do combined plot logistic_cipro <- amr_logistic(ecoli_geno, ecoli_ast, \"Ciprofloxacin\", c(\"Quinolones\"), maf=5)  logistic_cipro$plot logistic_cipro$bin_mat logistic_cipro$modelR logistic_cipro$modelNWT"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"explore-evidence-for-genopheno-association-from-solo-ppv-logistic-regression-and-upset-plots","dir":"","previous_headings":"Usage Examples","what":"Explore evidence for geno/pheno association from solo PPV, logistic regression, and upset plots","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"ecoli_geno <- import_amrfp(ecoli_geno_raw, \"Name\")  soloPPV_cipro <- solo_ppv_analysis(ecoli_geno, ecoli_ast, antibiotic=\"Ciprofloxacin\", drug_class_list=c(\"Quinolones\"), sir_col=\"pheno\")  logistic_cipro <- amr_logistic(ecoli_geno, ecoli_ast, \"Ciprofloxacin\", c(\"Quinolones\"), maf=5)  # combine solo PPV and logistic regression coefficients allstatsR <- merge_logreg_soloppv(logistic_cipro$modelR, soloPPV_cipro$solo_stats %>% filter(category==\"R\"), title=\"Quinolone markers vs Cip R\") allstatsNWT <- merge_logreg_soloppv(logistic_cipro$modelNWT, soloPPV_cipro$solo_stats %>% filter(category==\"NWT\"), title=\"Quinolone markers vs Cip NWT\")  allstatsR$plot + allstatsNWT$plot + plot_layout(guides=\"collect\")  # plots show no markers have solo PPV >50% for R, but many have solo PPV >70% for NWT # all these are also significant in logistic regression models  # which markers are predictive? allstatsNWT$combined %>% filter(ppv>0.5) %>% arrange(-ppv)  # which markers are significant in regression but have low solo PPV (or no solo genomes to provide evidence)? allstatsNWT$combined %>% filter(pval<0.05) %>% arrange(-ppv)  # do upset plot of MIC vs genotype marker combinations, ordering combinations by mean MIC # shows MIC distribution for solo markers is lower than combinations of markers amr_complexUpset(soloPPV_cipro$amr_binary, min_set_size=5, intersect_counts=F)  # using the other upset function amr_upset(soloPPV_cipro$amr_binary, min_set_size=2, order=\"mic\")"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"download-and-plot-reference-mic-distribution-from-eucastorg","dir":"","previous_headings":"Usage Examples","what":"Download and plot reference MIC distribution from eucast.org","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"# get MIC distribution for ciprofloxacin, for all organisms get_eucast_mic_distribution(\"cipro\")  # specify microorganism to only get results for that pathogen kleb_cip_mic_data <- get_eucast_mic_distribution(\"cipro\", \"K. pneumoniae\")  # get disk diffusion data instead kleb_cip_disk_data <- get_eucast_disk_distribution(\"cipro\", \"K. pneumoniae\")  # plot the MIC data  mics <- rep(kleb_cip_mic_data$mic, kleb_cip_mic_data$count) ggplot2::autoplot(mics, ab = \"cipro\", mo = \"K. pneumoniae\", title = \"Look at my MICs!\")"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"compare-own-mic-data-vs-reference-distribution-from-eucast","dir":"","previous_headings":"Usage Examples","what":"Compare own MIC data vs reference distribution from EUCAST","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"# random test my_mic_values <- AMR::random_mic(500) comparison <- compare_mic_with_eucast(my_mic_values, ab = \"cipro\", mo = \"K. pneumoniae\") comparison ggplot2::autoplot(comparison)   # example E. coli data comparison <- compare_mic_with_eucast(ecoli_ast %>% filter(drug_agent==\"CIP\") %>% pull(mic), ab = \"cipro\", mo = \"E. coli\") comparison ggplot2::autoplot(comparison) + ggtitle(\"E. coli - Ciprofloxacin\")"},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"Contributions welcome! encounter issues wish suggest new features, please open issue submit pull request.","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"package distributed GNU GPL-3.0 Licence. See LICENSE details.","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"dev-notes","dir":"","previous_headings":"","what":"Dev notes:","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"Comnon formats generated import functions, expected analysis/plotting functions","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"definition-genotype-dataframe","dir":"","previous_headings":"Dev notes:","what":"Definition: ‘genotype’ dataframe","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"required fields: - column indicating sample ID (string; matched phenotype data) - column named ‘marker’ indicating label specific gene mutation (S3 class ‘gene’) least one : - column named ‘drug_agent’ (S3 class ‘ab’; usually generated genotype parser function applying .ab) - column named ‘drug_class’ indicating drug class associated marker (controlled vocab string; allowed values antbiotics$group, usually generated genotype parser function, provided generated ‘drug_agent’) [might develop S3 class? e.g. needs include ‘efflux’] optionally: - column indicating species (S3 class mo; facilitate interpretation) genotype parsers generating 4 fields","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"definition-phenotype-dataframe","dir":"","previous_headings":"Dev notes:","what":"Definition: ‘phenotype’ dataframe","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"required fields: - column indicating sample ID (string; matched genotype data) - column named ‘drug_agent’ (S3 class ‘ab’; usually generated phenotype parser function applying .ab) least one : - column class ‘disk’ ‘mic’ - column class ‘sir’ optionally: - column indicating species (S3 class mo; facilitate interpretation)","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"expected-workflow-target-for-dev","dir":"","previous_headings":"Dev notes:","what":"Expected workflow (target for dev)","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"import genotype data -> genotype dataframe (e.g. import_amrfp) interpret SIR required (.sir; requires either species column, rows single species) optionally: filter files desired sample sets (e.g. filter species, check common sample identifiers exist) generating binary matrix SIR vs marker presence/absence suitable regression modelling (get_binary_matrix) cross-tabulating SIR vs marker presence/absence, calculating & plotting PPV (solo_ppv_analysis) upset plots showing MIC/DD distribution stratified genotype profile (amr_complexUpset amr_upset)","code":""},{"path":"https://interpretamr.github.io/AMRgen/index.html","id":"code-for-testing-harmonize_data---but-note-the-required-input-files-are-not-in-this-repo","dir":"","previous_headings":"Dev notes:","what":"Code for testing harmonize_data - but note the required input files are not in this repo","title":"Genotype-Phenotype Integration for Antimicrobial Resistance Research","text":"","code":"# test code amrfinder plus # note both amrfinderplus test files appear malformed according to hamronize  # and produce errors but the code works user_software_name <- \"amrfinderplus\" user_software_version <- \"3.12.8\" user_input_filename <- \"/Users/lshzd1/Desktop/ATB_Achromobacter_AFP.tsv\" user_database_version <- \"2024-01-31.1\"  test_data <- harmonize_data(user_software_name, user_software_version,                              user_database_version, user_input_filename)   # test code rgi - same arguments as for amrfinder plus user_software_name <- \"rgi\" user_software_version <- \"version x\" user_input_filename <- \"/Users/lshzd1/Desktop/2025-01-14_11:06:52.908_KPN2009.fasta.txt\" user_database_version <- \"database y\"  test_data <- harmonize_data(user_software_name, user_software_version,                              user_database_version, user_input_filename)   # test code - resfinder - must be json (hamronize can't do txt file) user_software_name <- \"resfinder\" user_software_version <- \"4.6.0\" user_input_filename <- \"/Users/lshzd1/Desktop/KPN2214.json\" user_database_version <- \"2024-08-06\"  test_data <- harmonize_data(user_software_name, user_software_version,                              user_database_version, user_input_filename)"},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AMRgen: Genotype-Phenotype Integration for Antimicrobial Resistance Research — AMRgen-package","title":"AMRgen: Genotype-Phenotype Integration for Antimicrobial Resistance Research — AMRgen-package","text":"AMRgen package provides tools interpreting antimicrobial resistance (AMR) genes, integrating genomic data phenotypic antimicrobial susceptibility testing (AST) data, calculating genotype-phenotype associations. package extends functionality AMR package, enabling researchers fetch MIC distribution data EUCAST, visualise multidrug resistance patterns using UpSet plots, generate NCBI-compliant antibiograms. Designed AMR research surveillance, AMRgen aims support data-driven decision-making combating AMR global scale.","code":""},{"path":[]},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AMRgen: Genotype-Phenotype Integration for Antimicrobial Resistance Research — AMRgen-package","text":"Maintainer: Matthijs S. Berends m.s.berends@umcg.nl (ORCID) Authors: Natacha Couto (ORCID) Zoe . Dyson zoe.dyson@lshtm.ac.uk (ORCID) Jane Hawkey (ORCID) Kat Holt (ORCID)","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen_barplot_mic_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","title":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","text":"function creates stacked bar plot using ggplot2, x-axis represents MIC (Minimum Inhibitory Concentration) values, y-axis represents frequency, bars colored gene symbols. plot faceted antibiotic.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen_barplot_mic_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","text":"","code":"AMRgen_barplot_mic_gen(   pheno_data,   geno_data,   pathogen_mo,   abs_to_plot,   pheno_sample_col = NULL,   geno_sample_col = NULL,   measure_method = \"mic\",   breakpoint_source = paste(\"EUCAST\", as.numeric(format(Sys.Date(), \"%Y\")) - 2),   breakpoint_type = \"ECOFF\",   color_by = \"gene\",   plot_title = \"Frequency distribution of values for different genotypes\",   leg_pos = \"bottom\",   ncol_leg = min(2, round(length(unique(geno_data$marker))/10)) )"},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen_barplot_mic_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","text":"pheno_data data.frame read phenotypic parser, containing column listing sample ID, \"spp_pheno\" (class mo), \"drug_agent\" (class ab), \"mic\" (class mic), \"disk\" (class disk). sample ID column used match geno_data. geno_data data.frame generated genotypic parser, containing sample ID column, \"marker\" (class gene), \"drug_agent\" (class ab, note value can NA specific agent), \"drug_class\" (controlled vocab drug classes AMR package) pathogen_mo string mo format specifying pathogen used select breakpoints, e.g. 'B_STPHY_AURS' abs_to_plot vector strings listing antibiotic drugs wish plot. Need three letter code format per AMR package pheno_sample_col name sample column pheno_data, defaults first column geno_sample_col name sample column geno_data, defaults first column measure_method string specifying method used measure antimicrobial resistance. default 'mic' Minimum Inhibitory Concentration, option 'disk' Disk Diffusion. breakpoint_source string representing source breakpoint data. default, set EUCAST 2023. breakpoint_type string specifying type breakpoint use, default 'ECOFF'. color_by string specifying variable used color plot elements. Options include 'gene' (default) color gene, 'class' color drug class. strings also default gene. plot_title string specifying title plot. default title \"Frequency distribution values different genotypes\". leg_pos string specifying position plot's legend. default 'bottom', options include 'top', 'left', 'right'. ncol_leg integer specifying number columns legend. default, calculated based number unique gene symbols geno_data, rounded 10 items per column, minimally 2. ensures legend well-organized many gene symbols.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen_barplot_mic_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","text":"ggplot2 object representing stacked bar plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen_barplot_mic_gen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","text":"function automatically groups data Antibiotic, MIC (mg/L), Gene symbol calculates frequency occurrences. plot uses viridis color scale \"turbo\" palette default. can replace custom palette desired.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/AMRgen_barplot_mic_gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Stacked Bar Plot of MIC Values Colored by Gene Symbol for Each Antibiotic — AMRgen_barplot_mic_gen","text":"","code":"if (FALSE) { # \\dontrun{ AMRgen_barplot_mic_gen(pheno_data,   geno_data,   abs_to_plot = c(\"CIP\", \"IPM\", \"MEM\"),   measure_method = \"mic\",   pathogen_mo = \"B_ESCHR_COLI\" ) } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_complexUpset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Upset plot for AMR data — amr_complexUpset","title":"Create an Upset plot for AMR data — amr_complexUpset","text":"function generates Upset plot using binary matrix genetic determinants antimicrobial resistance (AMR) data. Optionally, MIC disk diffusion breakpoints can overlaid plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_complexUpset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Upset plot for AMR data — amr_complexUpset","text":"","code":"amr_complexUpset(   binary_matrix,   min_set_size = 10,   mic_disk = \"mic\",   remove_NAs = TRUE,   gene_determinants = NULL,   colour_by = \"pheno\",   plot_breakpoints = FALSE,   organism = NULL,   break_guide = \"EUCAST 2024\",   break_type = \"ECOFF\",   drug = NULL,   sort_intersections_by = \"degree\",   sort_intersections = \"ascending\",   show_intersect_size = TRUE,   intersect_counts = TRUE,   heights = NULL,   colour_values = c(S = \"#66c2a5\", I = \"#fdae61\", R = \"#d53e4f\") )"},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_complexUpset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Upset plot for AMR data — amr_complexUpset","text":"binary_matrix binary matrix rows represent samples columns represent genetic determinants phenotypic resistance data. min_set_size minimum size set included plot. Default 10. mic_disk character string specifying whether use 'mic' 'disk' y-axis. Must either \"mic\" \"disk\". Default \"mic\". remove_NAs Logical. TRUE, removes rows missing values selected mic_disk column. Default TRUE. gene_determinants character vector specifying genetic determinants include. NULL, genes used. Default NULL. colour_by character string specifying column used colour mapping plot. Default \"pheno\". plot_breakpoints Logical. TRUE, overlays MIC disk diffusion breakpoints plot. Default FALSE. organism character string specifying organism, used plotting breakpoints. break_guide character string specifying breakpoint guideline (e.g., \"EUCAST 2024\"). Default \"EUCAST 2024\". break_type character string specifying breakpoint type (e.g., \"ECOFF\"). Default \"ECOFF\". drug character string specifying antimicrobial agent analysed. colour_values named vector specifying colours different resistance categories (S, , R). Default c(S=\"#66c2a5\", =\"#fdae61\", R=\"#d53e4f\").","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_complexUpset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Upset plot for AMR data — amr_complexUpset","text":"ggplot object displaying Upset plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_complexUpset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Upset plot for AMR data — amr_complexUpset","text":"","code":"# Example usage:  ecoli_geno <- import_amrfp(ecoli_geno_raw, \"Name\") #> Input is already a dataframe.  binary_matrix<- get_binary_matrix(geno_table=ecoli_geno,                pheno_table=ecoli_ast,                antibiotic=\"Ciprofloxacin\",                drug_class_list=c(\"Quinolones\"),                sir_col=\"pheno\",                keep_assay_values=TRUE,                keep_assay_values_from = \"mic\"            ) #> [1] \"Defining NWT using ecoff column provided: ecoff\" #> [1] \"Some samples had multiple phenotype rows, taking the most resistant only\" #> Joining with `by = join_by(id)` #> Joining with `by = join_by(id)` #> Joining with `by = join_by(id)`  amr_complexUpset(binary_matrix) #> Warning: Removed 171 rows containing non-finite outside the scale range (`stat_sum()`)."},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"AMR Logistic Regression Analysis — amr_logistic","title":"AMR Logistic Regression Analysis — amr_logistic","text":"Performs logistic regression analyze relationship genetic markers phenotype (R, NWT) specified antibiotic.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AMR Logistic Regression Analysis — amr_logistic","text":"","code":"amr_logistic(   geno_table,   pheno_table,   antibiotic,   drug_class_list,   geno_sample_col = NULL,   pheno_sample_col = NULL,   sir_col = \"pheno\",   ecoff_col = \"ecoff\",   maf = 10,   glm = FALSE,   single_plot = TRUE,   colors = c(\"maroon\", \"blue4\"),   axis_label_size = 9 )"},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AMR Logistic Regression Analysis — amr_logistic","text":"geno_table data frame containing genotype data. pheno_table data frame containing phenotypic data. antibiotic character string specifying antibiotic model using logistic regression. drug_class_list vector drug class names. Used subset relevant markers analysis. geno_sample_col (Optional) character string specifying column geno_table identifies sample IDs. Defaults NULL. pheno_sample_col (Optional) character string specifying column pheno_table identifies sample IDs. Defaults NULL. sir_col (Optional) character string specifying column pheno_table contains phenotype values (e.g., resistance/susceptibility). Defaults \"pheno\". ecoff_col (Optional) character string specifying column pheno_table containing ECOFF (epidemiological cutoff) values. Defaults \"ecoff\". maf (Optional) integer specifying minimum allele frequency (MAF) threshold. Markers MAF lower value excluded. Defaults 10. glm (Optional) Change TRUE fit model glm. Otherwise fit model logistf (default). single_plot (Optional) logical value. TRUE, single plot produced comparing estimates resistance (R) non-resistance (NWT). Otherwise, two plots printed side--side. Defaults TRUE. colors (Optional) vector two colors, use R NWT models plots. Defaults c(\"maroon\", \"blue4\"). axis_label_size (Optional) numeric value controlling size axis labels plot. Defaults 9.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AMR Logistic Regression Analysis — amr_logistic","text":"list three components: bin_mat binary matrix genetic data phenotypic resistance information. modelR fitted logistic regression model resistance (R). modelNWT fitted logistic regression model non-resistance (NWT). plot ggplot object comparing estimates resistance non-resistance corresponding statistical significance indicators.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AMR Logistic Regression Analysis — amr_logistic","text":"","code":"# Example usage of the amr_logistic function result <- amr_logistic(geno_table = import_amrfp(ecoli_geno_raw, \"Name\"),                        pheno_table = ecoli_ast,                        antibiotic = \"Ciprofloxacin\",                        drug_class_list = c(\"Quinolones\"),                        maf = 10) #> Input is already a dataframe. #> [1] \"Defining NWT using ecoff column provided: ecoff\" #> [1] \"Some samples had multiple phenotype rows, taking the most resistant only\" #> Joining with `by = join_by(id)` #> Joining with `by = join_by(id)` #> [1] \"Fitting logistic regression models using logistf\" #> Joining with `by = join_by(marker, est, ci.lower, ci.upper, pval, group)`   # To access the plot: print(result$plot)"},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_upset.html","id":null,"dir":"Reference","previous_headings":"","what":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","title":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","text":"function generates set visualizations analyze AMR gene combinations, MIC values, gene prevalence given binary matrix. creates several plots, including MIC distributions, bar plot percentage strains per combination, dot plot gene combinations strains, plot gene prevalence. also outputs table summarising MIC distribution (median, lower, upper) number resistant, marker combination.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_upset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","text":"","code":"amr_upset(   binary_matrix,   min_set_size = 2,   order = \"\",   plot_set_size = FALSE,   plot_category = TRUE,   print_category_counts = FALSE,   print_set_size = FALSE,   boxplot_colour = \"grey\" )"},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_upset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","text":"binary_matrix data frame containing original binary matrix output get_binary_matrix function. Expected columns identifier (column 1, name); 'pheno' (class sir, S//R categories colour points), 'mic' (class mic, MIC values plot), columns representing gene presence/absence (binary coded, ie 1=present, 0=absent). min_set_size integer specifying minimum size gene set included analysis plots. Default 2. genes least number occurrences included plots. order character string indicating order combinations x-axis. Options : - \"\": Default (decreasing frequency combinations), - \"genes\": Order number genes combination, - \"mic\": Order median MIC combination. Default decreasing frequency. plot_set_size Logical indicating whether include bar plot showing set size (.e. number times combination markers observed). Default FALSE. plot_category Logical indicating whether include stacked bar plot showing, marker combination, proportion samples phenotype classification (specified 'pheno' column input file). Default TRUE. print_category_counts Logical indicating whether, plot_category set true, print number strains resistance category, marker combination plot (default FALSE). print_set_size Logical indicating whether, plot_set_size set true, print number strains marker combination plot (default FALSE). boxplot_colour Colour lines box plots summarising MIC distribution marker combination, (default \"grey\").","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_upset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","text":"list containing following elements: plot grid plots displaying: () grid showing marker combinations observed, MIC distribution per marker combination, frequency per marker (optionally) phenotype classification /number samples marker combination. mic_summary Summary marker combination observed, including median MIC (interquartile range) positive predictive value resistance (R).","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_upset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","text":"function processes provided binary matrix (binary_matrix), expected contain data gene presence/absence, MIC values, phenotype calls (S//R) (can generated using get_binary_matrix). function also includes analysis gene prevalence ordering option visualizing combinations different ways.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/amr_upset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"amr_upset: Generate a series of plots for AMR gene and combination analysis — amr_upset","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage  ecoli_geno <- import_amrfp(ecoli_geno_raw, \"Name\")  binary_matrix<- get_binary_matrix(geno_table=ecoli_geno,                pheno_table=ecoli_ast,                antibiotic=\"Ciprofloxacin\",                drug_class_list=c(\"Quinolones\"),                sir_col=\"pheno\",                keep_assay_values=TRUE,                keep_assay_values_from = \"mic\"            )  amr_upset(binary_matrix, min_set_size = 3, order = \"mic\") } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/as.gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Class and AMR Parsing Functions — as.gene","title":"Gene Class and AMR Parsing Functions — as.gene","text":"Functions create custom \"gene\" class parse AMR data.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/as.gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Class and AMR Parsing Functions — as.gene","text":"","code":"as.gene(x)"},{"path":"https://interpretamr.github.io/AMRgen/reference/as.gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Class and AMR Parsing Functions — as.gene","text":"x character vector converted \"gene\" class.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/as.gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Class and AMR Parsing Functions — as.gene","text":".gene, object class \"gene\". import_amrfp(), data frame parsed AMR data.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/as.gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Class and AMR Parsing Functions — as.gene","text":"","code":"if (FALSE) { # \\dontrun{ # Create a gene object gene <- as.gene(c(\"gene1\", \"gene2\")) print(gene)  # Parse AMR data parsed_data <- import_amrfp(\"path/to/input_table.tsv\", \"SampleID\") } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/compare_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot to Compare Two Sets of Estimates — compare_estimates","title":"Plot to Compare Two Sets of Estimates — compare_estimates","text":"function compares two sets estimates creating plot overlays estimates confidence intervals sets. can also display estimates two separate plots.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/compare_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot to Compare Two Sets of Estimates — compare_estimates","text":"","code":"compare_estimates(   tbl1,   tbl2,   title1 = NULL,   title2 = NULL,   title = NULL,   sig = 0.05,   colors = c(\"maroon\", \"blue4\"),   x_title = \"Coefficient (95% CI)\",   y_title = \"Variant\",   axis_label_size = 9,   single_plot = TRUE,   pd = position_dodge(width = 0.8) )"},{"path":"https://interpretamr.github.io/AMRgen/reference/compare_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot to Compare Two Sets of Estimates — compare_estimates","text":"tbl1 tibble containing first set summary statistics (e.g., coefficients, p-values, CI) variant. Expected columns : marker: name marker (e.g., variable name). pval: p-value marker. ci.lower: lower bound confidence interval. ci.upper: upper bound confidence interval. est: estimated coefficient. tbl2 tibble containing second set summary statistics variant (format tbl1). title1 Title tbl1 data. single_plot, legend label tbl1 data; otherwise title tbl1 plot. title2 Title tbl2 data. single_plot, legend label tbl2 data; otherwise title tbl2 plot. title main title combined plot, single_plot TRUE. sig individual plots, p-value threshold data points highlight significant. Defaults 0.05. colors combined plot, vector two colors represent two input datasets. x_title title x-axis. Defaults \"Coefficient (95% CI)\". y_title title y-axis. Defaults \"Variant\". axis_label_size font size axis labels. Defaults 9. single_plot boolean indicating whether make single combined plot (TRUE), plot dataset side--side (FALSE).","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/compare_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot to Compare Two Sets of Estimates — compare_estimates","text":"ggplot object displaying comparison two sets estimates.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"E. coli NCBI AST example data, re-interpreted with AMR package — ecoli_ast","title":"E. coli NCBI AST example data, re-interpreted with AMR package — ecoli_ast","text":"subset E. coli phenotype data NCBI AST browser","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"E. coli NCBI AST example data, re-interpreted with AMR package — ecoli_ast","text":"","code":"ecoli_ast"},{"path":[]},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast.html","id":"ecoli-ast","dir":"Reference","previous_headings":"","what":"ecoli_ast","title":"E. coli NCBI AST example data, re-interpreted with AMR package — ecoli_ast","text":"data frame 15320 rows 24 columns representing reinterpreted data NCBI AST Browser: id sample identifier, imported BioSample column raw input spp_pheno species identifier, interpreted Scientific name using .mo, used interpret ecoff pheno columns drug_agent antibiotic code, interpreted Antibiotic using .ab, used interpret ecoff pheno columns ecoff WT/NWT classification, interpreted using .sir pheno S//R classification, interpreted using .sir mic minimum inhibitory concentration, formated using .mic, used interpret ecoff pheno columns disk disk diffusion zone, formated using .disk, used interpret ecoff pheno columns guideline interpretation guidelines used interpret ecoff pheno columns Scientific name species identifier, input file Antibiotic antibiotic name, input file Testing standard interpretation standard (EUCAST CLSI), input file Measurement sign measurement sign (>, <, =, etc) relating MIC measurement, input file MIC (mg/L) minimum inhibitory concentration, input file Disk diffusion (mm) disk diffusion zone, input file Resistance phenotype resistance call (SIR), input file","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"E. coli NCBI AST example data, re-interpreted with AMR package — ecoli_ast","text":"https://www.ncbi.nlm.nih.gov/pathogens/ast","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"E. coli NCBI AST example data — ecoli_ast_raw","title":"E. coli NCBI AST example data — ecoli_ast_raw","text":"subset E. coli phenotype data NCBI AST browser","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"E. coli NCBI AST example data — ecoli_ast_raw","text":"","code":"ecoli_ast_raw"},{"path":[]},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast_raw.html","id":"ecoli-ast-raw","dir":"Reference","previous_headings":"","what":"ecoli_ast_raw","title":"E. coli NCBI AST example data — ecoli_ast_raw","text":"data frame 10 rows 17 columns representing unprocessed data NCBI AST Browser: #BioSample sample identifier Scientific name species identifier Antibiotic antibiotic name Testing standard interpretation standard (EUCAST CLSI) Measurement sign measurement sign (>, <, =, etc) relating MIC measurement MIC (mg/L) minimum inhibitory concentration Disk diffusion (mm) disk diffusion zone Resistance phenotype resistance call (SIR) submitted","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_ast_raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"E. coli NCBI AST example data — ecoli_ast_raw","text":"https://www.ncbi.nlm.nih.gov/pathogens/ast","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_geno_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"E. coli genotype example data — ecoli_geno_raw","title":"E. coli genotype example data — ecoli_geno_raw","text":"Genotypes called using AMRfinderplus (v3.12.8, DB 2024-01-31.1), sourced AllTheBacteria project","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_geno_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"E. coli genotype example data — ecoli_geno_raw","text":"","code":"ecoli_geno_raw"},{"path":[]},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_geno_raw.html","id":"ecoli-geno-raw","dir":"Reference","previous_headings":"","what":"ecoli_geno_raw","title":"E. coli genotype example data — ecoli_geno_raw","text":"data frame 53591 rows 10 columns representing genotyping results AMRfinderplus: Name sample identifier Gene symbol gene symbol NCBI refgene Hierarchy node node NCBI hierarchy Class, Subclass drug class/es associated marker (NCBI refgene) % Coverage reference sequence,% Identity reference sequence, Accession closest sequence` sequence match information","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/ecoli_geno_raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"E. coli genotype example data — ecoli_geno_raw","text":"https://github.com/ncbi/amr/wiki/Interpreting-results","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/eucast_supported_ab_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Available Antimicrobial Wild Type Distributions from EUCAST — eucast_supported_ab_distributions","title":"Retrieve Available Antimicrobial Wild Type Distributions from EUCAST — eucast_supported_ab_distributions","text":"Run function get updated list antimicrobial distributions currently supported EUCAST. retrieves live info https://mic.eucast.org.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/eucast_supported_ab_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Available Antimicrobial Wild Type Distributions from EUCAST — eucast_supported_ab_distributions","text":"","code":"eucast_supported_ab_distributions(...)"},{"path":"https://interpretamr.github.io/AMRgen/reference/eucast_supported_ab_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Available Antimicrobial Wild Type Distributions from EUCAST — eucast_supported_ab_distributions","text":"... arguments passed function, currently unused","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/eucast_supported_ab_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Available Antimicrobial Wild Type Distributions from EUCAST — eucast_supported_ab_distributions","text":"","code":"eucast_supported_ab_distributions() #>                             AMK                             AMX  #>                      \"Amikacin\"                   \"Amoxicillin\"  #>                             AMC                             AMB  #>   \"Amoxicillin/clavulanic acid\"                \"Amphotericin B\"  #>                             AMP                             SAM  #>                    \"Ampicillin\"          \"Ampicillin/sulbactam\"  #>                             SAM                             ANI  #>          \"Ampicillin/sulbactam\"                 \"Anidulafungin\"  #>                             APR                             APX  #>                     \"Apramycin\"                  \"Aspoxicillin\"  #>                             AVI                             AZM  #>                    \"Avilamycin\"                  \"Azithromycin\"  #>                             ATM                             AZA  #>                     \"Aztreonam\"           \"Aztreonam/avibactam\"  #>                             BAC                             BDQ  #>                    \"Bacitracin\"                   \"Bedaquiline\"  #>                             PEN                             CAP  #>              \"Benzylpenicillin\"                   \"Capreomycin\"  #>                             CEC                             CFR  #>                      \"Cefaclor\"                    \"Cefadroxil\"  #>                             LEX                             RID  #>                     \"Cefalexin\"                  \"Cefaloridine\"  #>                             CEP                             HAP  #>                     \"Cefalotin\"                     \"Cefapirin\"  #>                             CZO                             CDR  #>                     \"Cefazolin\"                      \"Cefdinir\"  #>                             FEP                             FPT  #>                      \"Cefepime\"           \"Cefepime/tazobactam\"  #>                             FPZ                             FDC  #>           \"Cefepime/zidebactam\"                   \"Cefiderocol\"  #>                             CFM                             CFP  #>                      \"Cefixime\"                  \"Cefoperazone\"  #>                             CSL                             CSE  #>        \"Cefoperazone/sulbactam\"                     \"Cefoselis\"  #>                             CTX                             CTT  #>                    \"Cefotaxime\"                     \"Cefotetan\"  #>                             FOV                             FOX  #>                     \"Cefovecin\"                     \"Cefoxitin\"  #>                             CPO                             CPD  #>                     \"Cefpirome\"                   \"Cefpodoxime\"  #>                             CDC                             CEQ  #>   \"Cefpodoxime/clavulanic acid\"                    \"Cefquinome\"  #>                             CPT                             CAZ  #>                   \"Ceftaroline\"                   \"Ceftazidime\"  #>                             CZA                             CTB  #>         \"Ceftazidime/avibactam\"                    \"Ceftibuten\"  #>                             TIO                             BPR  #>                     \"Ceftiofur\"                  \"Ceftobiprole\"  #>                             CZT                             CZT  #>        \"Ceftolozane/tazobactam\"        \"Ceftolozane/tazobactam\"  #>                             CRO                             CXM  #>                   \"Ceftriaxone\"                    \"Cefuroxime\"  #>                             CED                             CHL  #>                    \"Cephradine\"               \"Chloramphenicol\"  #>                             CTE                             CIP  #>             \"Chlortetracycline\"                 \"Ciprofloxacin\"  #>                             CLR                            CLA1  #>                \"Clarithromycin\"               \"Clavulanic acid\"  #>                             CLX                             CLI  #>                 \"Clinafloxacin\"                   \"Clindamycin\"  #>                             CLF                             CLO  #>                   \"Clofazimine\"                   \"Cloxacillin\"  #>                             COL                             CYC  #>                      \"Colistin\"                   \"Cycloserine\"  #>                             DAL                             DAN  #>                   \"Dalbavancin\"                  \"Danofloxacin\"  #>                             DAP                             DFX  #>                    \"Daptomycin\"                  \"Delafloxacin\"  #>                             DLM                             DIC  #>                     \"Delamanid\"                 \"Dicloxacillin\"  #>                             DIF                             DOR  #>                    \"Difloxacin\"                     \"Doripenem\"  #>                             DOX                             ENR  #>                   \"Doxycycline\"                  \"Enrofloxacin\"  #>                             ERV                             ETP  #>                  \"Eravacycline\"                     \"Ertapenem\"  #>                             ERY                             ETH  #>                  \"Erythromycin\"                    \"Ethambutol\"  #>                            ETI1                             FAR  #>                   \"Ethionamide\"                     \"Faropenem\"  #>                             FDX                             FLR  #>                   \"Fidaxomicin\"                   \"Florfenicol\"  #>                             FLC                             FLU  #>                \"Flucloxacillin\"                   \"Fluconazole\"  #>                             FCT                             FLM  #>                   \"Flucytosine\"                    \"Flumequine\"  #>                             FOS                             FUS  #>                    \"Fosfomycin\"                  \"Fusidic acid\"  #>                             GAM                             GAT  #>                 \"Gamithromycin\"                  \"Gatifloxacin\"  #>                             GEM                             GEN  #>                  \"Gemifloxacin\"                    \"Gentamicin\"  #>                             IPM                             IMR  #>                      \"Imipenem\"           \"Imipenem/relebactam\"  #>                             ISV                             INH  #>                 \"Isavuconazole\"                     \"Isoniazid\"  #>                             ITR                             KAN  #>                  \"Itraconazole\"                     \"Kanamycin\"  #>                             KET                             LAS  #>                  \"Ketoconazole\"                     \"Lasalocid\"  #>                             LMU                             LVX  #>                     \"Lefamulin\"                  \"Levofloxacin\"  #>                             LIN                             LNZ  #>                    \"Lincomycin\"                     \"Linezolid\"  #>                             LOR                             MAR  #>                    \"Loracarbef\"                 \"Marbofloxacin\"  #>                             MEC                             MEM  #>                    \"Mecillinam\"                     \"Meropenem\"  #>                             MEV                             MTR  #>         \"Meropenem/vaborbactam\"                 \"Metronidazole\"  #>                             MIF                             MNO  #>                    \"Micafungin\"                   \"Minocycline\"  #>                             MON                             MFX  #>               \"Monensin sodium\"                  \"Moxifloxacin\"  #>                             MUP                             NAL  #>                     \"Mupirocin\"                \"Nalidixic acid\"  #>                             NAR                             NEO  #>                       \"Narasin\"                      \"Neomycin\"  #>                             NET                             NIT  #>                    \"Netilmicin\"                \"Nitrofurantoin\"  #>                             NTR                             NOR  #>                   \"Nitroxoline\"                   \"Norfloxacin\"  #>                             NVA                             OFX  #>                 \"Norvancomycin\"                     \"Ofloxacin\"  #>                             OMC                             ORB  #>                  \"Omadacycline\"                  \"Orbifloxacin\"  #>                             ORI                             OXA  #>                   \"Oritavancin\"                     \"Oxacillin\"  #>                             OXO                             OXY  #>                 \"Oxolinic acid\"               \"Oxytetracycline\"  #>                             PEF                             PHN  #>                    \"Pefloxacin\"       \"Phenoxymethylpenicillin\"  #>                             PIP                             TZP  #>                  \"Piperacillin\"       \"Piperacillin/tazobactam\"  #>                             PRL                             POS  #>                    \"Pirlimycin\"                  \"Posaconazole\"  #>                             PRA                             PRI  #>                 \"Pradofloxacin\"                 \"Pristinamycin\"  #>                             PZA                             QDA  #>                  \"Pyrazinamide\"     \"Quinupristin/dalfopristin\"  #>                             RTP                             RZF  #>                   \"Retapamulin\"                    \"Rezafungin\"  #>                             RIB                             RIF  #>                     \"Rifabutin\"                    \"Rifampicin\"  #>                             RXT                             SAL  #>                 \"Roxithromycin\"                   \"Salinomycin\"  #>                             SEC                             SIT  #>                   \"Secnidazole\"                  \"Sitafloxacin\"  #>                             SPT                             SPI  #>                 \"Spectinomycin\"                    \"Spiramycin\"  #>                            STR1                             SUL  #>                  \"Streptomycin\"                     \"Sulbactam\"  #>                             SDI                             SMX  #>                  \"Sulfadiazine\"              \"Sulfamethoxazole\"  #>                             SOX                             TZD  #>                 \"Sulfisoxazole\"                     \"Tedizolid\"  #>                             TEC                             TLV  #>                   \"Teicoplanin\"                    \"Telavancin\"  #>                             TLV                             TLT  #>                    \"Telavancin\"                 \"Telithromycin\"  #>                             TEM                             TRB  #>                    \"Temocillin\"                   \"Terbinafine\"  #>                             TCY                             THI  #>                  \"Tetracycline\"                 \"Thiamphenicol\"  #>                             TIA                             TIC  #>                      \"Tiamulin\"                   \"Ticarcillin\"  #>                             TCC                             TGC  #>   \"Ticarcillin/clavulanic acid\"                   \"Tigecycline\"  #>                             TIP                             TIL  #>                  \"Tildipirosin\"                    \"Tilmicosin\"  #>                             TOB                             TMP  #>                    \"Tobramycin\"                  \"Trimethoprim\"  #>                             SXT                             TUL  #> \"Trimethoprim/sulfamethoxazole\"                 \"Tulathromycin\"  #>                             TYL                            TYL1  #>                       \"Tylosin\"                    \"Tylvalosin\"  #>                             VAN                             VIO  #>                    \"Vancomycin\"                      \"Viomycin\"  #>                             VOR  #>                  \"Voriconazole\""},{"path":"https://interpretamr.github.io/AMRgen/reference/export_ncbi_biosample.html","id":null,"dir":"Reference","previous_headings":"","what":"Import/Export BioSample Antibiograms — export_ncbi_biosample","title":"Import/Export BioSample Antibiograms — export_ncbi_biosample","text":"Output phenotype data NCBI BioSample Antibiograms.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/export_ncbi_biosample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import/Export BioSample Antibiograms — export_ncbi_biosample","text":"","code":"export_ncbi_biosample(data, file, overwrite = FALSE)"},{"path":"https://interpretamr.github.io/AMRgen/reference/export_ncbi_biosample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import/Export BioSample Antibiograms — export_ncbi_biosample","text":"data data set containing SIR results","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_binary_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","title":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","text":"function generates binary matrix representing resistance (R vs S/) nonwildtype (R/vs S) status given antibiotic, presence absence genetic markers related one specified drug classes. takes input separate tables genotype phenotype data, matches according common identifier (either specified column names assuming first column contains ID), filters data according specified antibiotic drug class criteria creating binary matrix. Suitable input files can generated using import_ncbi_ast import phenotype data NCBI, parse_amrfp import genotype data AMRfinderPlus.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_binary_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","text":"","code":"get_binary_matrix(   geno_table,   pheno_table,   antibiotic,   drug_class_list,   keep_SIR = TRUE,   keep_assay_values = FALSE,   keep_assay_values_from = c(\"mic\", \"disk\"),   geno_sample_col = NULL,   pheno_sample_col = NULL,   sir_col = \"pheno\",   ecoff_col = \"ecoff\" )"},{"path":"https://interpretamr.github.io/AMRgen/reference/get_binary_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","text":"geno_table data frame containing genotype data, including least one column labeled drug_class drug class information one column sample identifiers (specified via geno_sample_col, otherwise assumed first column contains identifiers). pheno_table data frame containing phenotype data, must include column drug_agent (antibiotic information), column resistance interpretation (S//R, specified via sir_col), optionally column ECOFF interpretation (WT/NWT, specified via ecoff_col). antibiotic character string specifying antibiotic interest filter phenotype data. value must match one entries drug_agent column pheno_table. drug_class_list character vector drug classes filter genotype data markers related specified antibiotic. Markers geno_table filtered based whether drug_class matches value list. keep_SIR logical indicating whether retain full S//R phenotype column output. Defaults TRUE. keep_assay_values logical indicating whether include columns raw phenotype assay data. Assumes columns labelled \"mic\" \"disk\"; added output table present. Defaults FALSE. keep_assay_values_from character vector specifying assay values (e.g., \"mic\", \"disk\") retain keep_assay_values TRUE. Defaults c(\"mic\", \"disk\"). geno_sample_col character string (optional) specifying column name geno_table containing sample identifiers. Defaults NULL, case assumed first column contains identifiers. pheno_sample_col character string (optional) specifying column name pheno_table containing sample identifiers. Defaults NULL, case assumed first column contains identifiers. sir_col character string specifying column name pheno_table contains resistance interpretation (SIR) data. values interpretable \"R\" (resistant), \"\" (intermediate), \"S\" (susceptible). ecoff_col character string specifying column name pheno_table contains ECOFF interpretation phenotype. values interpretable \"WT\" (wildtype) \"NWT\" (nonwildtype).","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_binary_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","text":"data frame row represents sample, column represents genetic marker related specified antibiotic's drug class. binary values matrix indicate presence (1) absence (0) marker sample, along resistance status columns specified antibiotic (R resistant defined sir_col (1=R, 0=/S); NWT nonwildtype, defined ecoff_col provided (1=NWT, 0=WT), otherwise defined sir_col (1=/R, 0=S)).","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_binary_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","text":"function performs several steps: Verifies pheno_table contains drug_agent column converts class ab necessary. Filters pheno_table retain data related specified antibiotic. Checks geno_table contains markers associated specified drug class(es). Matches sample identifiers geno_table pheno_table. Extracts transforms phenotype data binary format indicating resistance NWT status. Constructs binary matrix genotype data, column representing genetic marker. Returns single matrix sample identifiers plus binary variables phenotype genetic marker.","code":""},{"path":[]},{"path":"https://interpretamr.github.io/AMRgen/reference/get_binary_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Binary Matrix of Genotype and Phenotype Data — get_binary_matrix","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage geno_table <- parse_amrfp(\"testdata/Ecoli_AMRfinderplus_n50.tsv\", \"Name\") pheno_table <- import_ncbi_ast(\"testdata/Ecoli_AST_NCBI_n50.tsv\")  # Binary R/NWT phenotypes only get_binary_matrix(   geno_table,   pheno_table,   antibiotic = \"Ciprofloxacin\",   drug_class_list = c(\"Quinolones\"),   sir_col = \"Resistance phenotype\" )  # Return AST assay phenotype values (default = MIC, disk) get_binary_matrix(   geno_table,   pheno_table,   antibiotic = \"Ciprofloxacin\",   drug_class_list = c(\"Quinolones\"),   sir_col = \"Resistance phenotype\",   keep_assay_values = TRUE )  # Return MIC phenotype values only get_binary_matrix(   geno_table,   pheno_table,   antibiotic = \"Ciprofloxacin\",   drug_class_list = c(\"Quinolones\"),   sir_col = \"Resistance phenotype\",   keep_assay_values = TRUE,   keep_assay_values_from = \"mic\" )  get_binary_matrix(   geno_table,   pheno_table,   antibiotic = \"Ciprofloxacin\",   drug_class_list = c(\"Quinolones\"),   sir_col = \"Resistance phenotype\",   keep_assay_values = TRUE,   keep_assay_values_from = \"MIC (mg/L)\" ) } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/get_eucast_amr_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","title":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","text":"functions allow retrieval antimicrobial wild type distributions, live eucast.org.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_eucast_amr_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","text":"","code":"get_eucast_amr_distribution(   ab,   mo = NULL,   method = \"MIC\",   as_freq_table = TRUE )  get_eucast_mic_distribution(ab, mo = NULL, as_freq_table = TRUE)  get_eucast_disk_distribution(ab, mo = NULL, as_freq_table = TRUE)  compare_mic_with_eucast(mics, ab, mo = NULL)  compare_disk_with_eucast(disks, ab, mo = NULL)"},{"path":"https://interpretamr.github.io/AMRgen/reference/get_eucast_amr_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","text":"ab antimicrobial, can anything understood ab_name() mo microorganism, can anything understood mo_name() (can left blank) method either \"MIC\" \"disk\"/\"diff\" as_freq_table either TRUE (default) FALSE, return result frequency table mics MIC values, coerced .mic() disks Disk diffusion values, coerced .disk()","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_eucast_amr_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","text":"compare_*_with_eucast() functions allow compare user range EUCAST distributions. Use ggplot2::autoplot() output visualise results.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_eucast_amr_distribution.html","id":"supported-antimicrobials","dir":"Reference","previous_headings":"","what":"Supported Antimicrobials","title":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","text":"December 2024, EUCAST 176 distributions available, namely antimicrobials: Amikacin, amoxicillin, amoxicillin/clavulanic acid, amphotericin B, ampicillin, ampicillin/sulbactam, anidulafungin, apramycin, aspoxicillin, avilamycin, azithromycin, aztreonam, aztreonam/avibactam, bacitracin, bedaquiline, benzylpenicillin, capreomycin, cefaclor, cefadroxil, cefalexin, cefaloridine, cefalotin, cefapirin, cefazolin, cefdinir, cefepime, cefepime/tazobactam, cefepime/zidebactam, cefiderocol, cefixime, cefoperazone, cefoperazone/sulbactam, cefoselis, cefotaxime, cefotetan, cefovecin, cefoxitin, cefpirome, cefpodoxime, cefpodoxime/clavulanic acid, cefquinome, ceftaroline, ceftazidime, ceftazidime/avibactam, ceftibuten, ceftiofur, ceftobiprole, ceftolozane/tazobactam, ceftriaxone, cefuroxime, cephradine, chloramphenicol, chlortetracycline, ciprofloxacin, clarithromycin, clavulanic acid, clinafloxacin, clindamycin, clofazimine, cloxacillin, colistin, cycloserine, dalbavancin, danofloxacin, daptomycin, delafloxacin, delamanid, dicloxacillin, difloxacin, doripenem, doxycycline, enrofloxacin, eravacycline, ertapenem, erythromycin, ethambutol, ethionamide, faropenem, fidaxomicin, florfenicol, flucloxacillin, fluconazole, flucytosine, flumequine, fosfomycin, fusidic acid, gamithromycin, gatifloxacin, gemifloxacin, gentamicin, imipenem, imipenem/relebactam, isavuconazole, isoniazid, itraconazole, kanamycin, ketoconazole, lefamulin, levofloxacin, lincomycin, linezolid, loracarbef, marbofloxacin, mecillinam, meropenem, meropenem/vaborbactam, metronidazole, micafungin, minocycline, moxifloxacin, mupirocin, nalidixic acid, narasin, neomycin, netilmicin, nitrofurantoin, nitroxoline, norfloxacin, norvancomycin, ofloxacin, omadacycline, orbifloxacin, oritavancin, oxacillin, oxolinic acid, oxytetracycline, pefloxacin, phenoxymethylpenicillin, piperacillin, piperacillin/tazobactam, pirlimycin, posaconazole, pradofloxacin, pristinamycin, pyrazinamide, quinupristin/dalfopristin, retapamulin, rezafungin, rifabutin, rifampicin, roxithromycin, secnidazole, sitafloxacin, spectinomycin, spiramycin, streptomycin, sulbactam, sulfadiazine, sulfamethoxazole, sulfisoxazole, tedizolid, teicoplanin, telavancin, telithromycin, temocillin, terbinafine, tetracycline, thiamphenicol, tiamulin, ticarcillin, ticarcillin/clavulanic acid, tigecycline, tildipirosin, tilmicosin, tobramycin, trimethoprim, trimethoprim/sulfamethoxazole, tulathromycin, tylosin, tylvalosin, vancomycin, viomycin, voriconazole. current list, run eucast_supported_ab_distributions().","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/get_eucast_amr_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and Compare Antimicrobial Wild Type Distributions from EUCAST — get_eucast_amr_distribution","text":"","code":"get_eucast_mic_distribution(\"cipro\") #> # A tibble: 2,033 × 4 #>    microorganism              microorganism_code   mic count #>    <chr>                      <mo>               <mic> <int> #>  1 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.002     0 #>  2 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.004     0 #>  3 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.008     0 #>  4 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.016     0 #>  5 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.030     0 #>  6 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.060     0 #>  7 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.125     0 #>  8 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.250     1 #>  9 Achromobacter xylosoxidans B_ACHRMB_XYLS      0.500     0 #> 10 Achromobacter xylosoxidans B_ACHRMB_XYLS      1.000     6 #> # ℹ 2,023 more rows  # not returning as frequency table get_eucast_mic_distribution(\"cipro\", as_freq_table = FALSE) #> # A tibble: 107 × 25 #>    microorganism       microorganism_code `0.002` `0.004` `0.008` `0.016` `0.03` #>    <chr>               <mo>                 <dbl>   <dbl>   <dbl>   <dbl>  <dbl> #>  1 Achromobacter xylo… B_ACHRMB_XYLS            0       0       0       0      0 #>  2 Acinetobacter baum… B_ACNTB_BMNN             0       0       2       5     16 #>  3 Acinetobacter pitt… B_ACNTB_PITT             0       0       0       0      0 #>  4 Actinomyces israel… B_AMYCS_ISRL             0       0       0       0      0 #>  5 Aerococcus sanguin… B_AERCC_SNGN             0       0       0       0      0 #>  6 Aerococcus urinae   B_AERCC_URIN             0       0       0       0      0 #>  7 Alcaligenes faecal… B_ALCLG_FCLS             0       0       0       0      0 #>  8 Bacillus anthracis  B_BCLLS_ANTH             0       0       0       0      2 #>  9 Bacillus cereus     B_BCLLS_CERS             0       0       0       0      0 #> 10 Brucella melitensis B_BRCLL_MLTN             0       0       0       1      0 #> # ℹ 97 more rows #> # ℹ 18 more variables: `0.06` <dbl>, `0.125` <dbl>, `0.25` <dbl>, `0.5` <dbl>, #> #   `1` <int>, `2` <int>, `4` <int>, `8` <int>, `16` <int>, `32` <int>, #> #   `64` <int>, `128` <int>, `256` <int>, `512` <int>, distributions <chr>, #> #   observations <chr>, ecoff <chr>, confidence_interval <chr>  # specify microorganism to only get results for that pathogen get_eucast_mic_distribution(\"cipro\", \"K. pneumoniae\") #> # A tibble: 19 × 2 #>        mic count #>      <mic> <int> #>  1   0.002     0 #>  2   0.004     4 #>  3   0.008   116 #>  4   0.016   545 #>  5   0.030  1456 #>  6   0.060   692 #>  7   0.125   196 #>  8   0.250   189 #>  9   0.500   119 #> 10   1.000    88 #> 11   2.000    36 #> 12   4.000    43 #> 13   8.000    26 #> 14  16.000    36 #> 15  32.000   105 #> 16  64.000    53 #> 17 128.000    31 #> 18 256.000    28 #> 19 512.000    15  get_eucast_disk_distribution(\"cipro\", \"K. pneumoniae\") #> # A tibble: 45 × 2 #>    disk_diffusion count #>             <dsk> <int> #>  1              6   362 #>  2              7     6 #>  3              8     8 #>  4              9     8 #>  5             10    20 #>  6             11    15 #>  7             12     5 #>  8             13     8 #>  9             14    20 #> 10             15    37 #> # ℹ 35 more rows   # Plotting ----------------------------------------------------------------  mic_data <- get_eucast_mic_distribution(\"cipro\", \"K. pneumoniae\") mics <- rep(mic_data$mic, mic_data$count) ggplot2::autoplot(mics, ab = \"cipro\", mo = \"K. pneumoniae\", title = \"Look at my MICs!\")   disk_data <- get_eucast_disk_distribution(\"cipro\", \"K. pneumoniae\") disks <- rep(disk_data$disk_diffusion, disk_data$count) ggplot2::autoplot(disks, ab = \"cipro\", mo = \"K. pneumoniae\", title = \"Look at my diffusion zones!\")    # Comparing With User Values ----------------------------------------------  my_mic_values <- AMR::random_mic(500) comparison <- compare_mic_with_eucast(my_mic_values, ab = \"cipro\", mo = \"K. pneumoniae\") #> Joining with `by = join_by(value)` comparison #> # A tibble: 25 × 3 #>    value    user eucast #>  * <fct>   <int>  <int> #>  1 <=0.001    35      0 #>  2 0.002      31      0 #>  3 0.004       0      4 #>  4 0.005      25      0 #>  5 0.008       0    116 #>  6 0.01       20      0 #>  7 0.016       0    545 #>  8 0.025      32      0 #>  9 0.03        0   1456 #> 10 0.06        0    692 #> # ℹ 15 more rows #> Use ggplot2::autoplot() on this output to visualise ggplot2::autoplot(comparison)"},{"path":"https://interpretamr.github.io/AMRgen/reference/glm_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Details from a Generalized Linear Model — glm_details","title":"Extract Details from a Generalized Linear Model — glm_details","text":"function extracts formats estimates, confidence intervals, p-values fitted glm model.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/glm_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Details from a Generalized Linear Model — glm_details","text":"","code":"glm_details(model)"},{"path":"https://interpretamr.github.io/AMRgen/reference/glm_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Details from a Generalized Linear Model — glm_details","text":"model fitted glm model object.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/glm_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Details from a Generalized Linear Model — glm_details","text":"tibble containing estimates, confidence intervals, p-values predictor model. Example model <- glm(R ~ ., data=dat, family = binomial(link = \"logit\")) model_details <- glm_details(model) autoplot(model_details)","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/gtdb.mo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Microorganism from GTDB Species Name — gtdb.mo","title":"Get Microorganism from GTDB Species Name — gtdb.mo","text":"Parse character vector containing species names GTDB output get valid microorganism code.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/gtdb.mo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Microorganism from GTDB Species Name — gtdb.mo","text":"","code":"gtdb.mo(species)"},{"path":"https://interpretamr.github.io/AMRgen/reference/gtdb.mo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Microorganism from GTDB Species Name — gtdb.mo","text":"species name species, coerced .mo()","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/gtdb.mo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Microorganism from GTDB Species Name — gtdb.mo","text":"microorganism","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/gtdb.mo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Microorganism from GTDB Species Name — gtdb.mo","text":"","code":"gtdb.mo(\"Escherichia_A coli_BC\") #> Class 'mo' #> [1] B_ESCHR_COLI_COLI"},{"path":"https://interpretamr.github.io/AMRgen/reference/harmonize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"hamronize_data — harmonize_data","title":"hamronize_data — harmonize_data","text":"hamronize_data","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/harmonize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hamronize_data — harmonize_data","text":"","code":"harmonize_data(   user_software_name,   user_software_version,   user_database_version,   user_input_filename )"},{"path":"https://interpretamr.github.io/AMRgen/reference/harmonize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hamronize_data — harmonize_data","text":"user_software_name analysis software used screen genome data AMR determinants (must amrfinderplus, rgi, resfinder) user_software_version version analysis software used screen genome data user_database_version version database used user_input_filename name genotypic AMR data file","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/harmonize_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hamronize_data — harmonize_data","text":"data frame containing 'harmonized' AMR genotype data","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/harmonize_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hamronize_data — harmonize_data","text":"","code":"if (FALSE) { # \\dontrun{ harmonize_data(   user_software_name = \"amrfinderplus\",   user_software_version = \"3.12.8\",   user_input_filename = \"ATB_Achromobacter_AFP.tsv\",   user_database_version = \"2024-01-31.1\" ) } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/import_amrfp.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and process AMRFinderPlus results — import_amrfp","title":"Import and process AMRFinderPlus results — import_amrfp","text":"function imports processes AMRFinderPlus results, extracting antimicrobial resistance (AMR) elements mapping standardised antibiotic names drug classes. function also converts gene symbols harmonised format ensures compatibility AMR package.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_amrfp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and process AMRFinderPlus results — import_amrfp","text":"","code":"import_amrfp(input_table, sample_col, amrfp_drugs = amrfp_drugs_table)"},{"path":"https://interpretamr.github.io/AMRgen/reference/import_amrfp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and process AMRFinderPlus results — import_amrfp","text":"input_table character string specifying path AMRFinderPlus results table (TSV format). sample_col character string specifying column identifies samples dataset. amrfp_drugs tibble containing reference table mapping AMRFinderPlus subclasses (AFP_Subclass) standardised drug agents (drug_agent) drug classes (drug_class). Defaults amrfp_drugs_table, provided internally.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_amrfp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and process AMRFinderPlus results — import_amrfp","text":"tibble containing processed AMR elements, harmonised gene names, mapped drug agents, drug classes. output retains original columns AMRFinderPlus table along newly mapped variables.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_amrfp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import and process AMRFinderPlus results — import_amrfp","text":"function performs following steps: Reads AMRFinderPlus output table. Filters data include AMR elements. Converts gene symbols harmonised format. Splits multiple subclass annotations separate rows. Maps AMRFinderPlus subclasses standardised drug agent drug class names using amrfp_drugs. Converts drug agent names \"ab\" class AMR package. processing ensures compatibility downstream AMR analysis workflows.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_amrfp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and process AMRFinderPlus results — import_amrfp","text":"","code":"# Example usage: if (FALSE) { # \\dontrun{ # small example E. coli AMRfinderplus data ecoli_geno_raw  # import first few rows of this data frame and parse it as AMRfp data geno <- import_amrfp(ecoli_geno_raw %>% head(n=10), \"Name\") geno } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/import_gtdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Import GTDB Output — import_gtdb","title":"Import GTDB Output — import_gtdb","text":"Import GTDB output (file data frame) parse species name microorganism recognised AMR package. AMR mo code species name added data frame.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_gtdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import GTDB Output — import_gtdb","text":"","code":"import_gtdb(file = NULL, tbl = NULL, species_column = \"Species\")"},{"path":"https://interpretamr.github.io/AMRgen/reference/import_gtdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import GTDB Output — import_gtdb","text":"file File path GTDB output file (tab-separated). given, tbl must given. tbl Data frame containing GTDB output. given, file must given. species_column Name column containing species call (default \"Species\").","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_gtdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import GTDB Output — import_gtdb","text":"tbl Data frame containing GTDB output AMR-parsed microorganism code (gtdb.mo) species name (gtdb.species) appended.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_gtdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import GTDB Output — import_gtdb","text":"","code":"if (FALSE) { # \\dontrun{ import_gtdb(tbl = data.frame(Species = c(   \"Pseudomonas_E piscis\",   \"Haemophilus_D parainfluenzae_A\",   \"Acinetobacter calcoaceticus_C\" ))) } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/import_ncbi_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and process AST data from an NCBI file — import_ncbi_ast","title":"Import and process AST data from an NCBI file — import_ncbi_ast","text":"function imports antibiotic susceptibility testing (AST) dataset, processes data, optionally interprets results based MIC disk diffusion data. assumes input file tab-delimited text file (e.g., TSV) parses relevant columns (antibiotic names, species names, MIC disk data) suitable classes using AMR package. optionally can use AMR package determine susceptibility phenotype (SIR) based EUCAST CLSI guidelines (human breakpoints /ECOFF). expected columns found warnings given, interpretation may possible.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_ncbi_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and process AST data from an NCBI file — import_ncbi_ast","text":"","code":"import_ncbi_ast(   input,   sample_col = \"#BioSample\",   interpret = F,   ecoff = F,   default_guideline = \"EUCAST\" )"},{"path":"https://interpretamr.github.io/AMRgen/reference/import_ncbi_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and process AST data from an NCBI file — import_ncbi_ast","text":"input string representing dataframe, path tab-delimited file, containing AST data NCBI antibiogram format. files can downloaded fromNCBI AST browser, e.g. https://www.ncbi.nlm.nih.gov/pathogens/ast#Pseudomonas%20aeruginosa sample_col string indicating name column sample identifiers. NULL, assume '#BioSample'. interpret logical value (default FALSE). TRUE, function interpret susceptibility phenotype (SIR) row based MIC disk diffusion values, human breakpoints either EUCAST CLSI testing standard (indicated Testing standard column input file, blank value default_guideline parameter used default). FALSE, interpretation performed. ecoff logical value (default FALSE). TRUE, function interpret wildtype vs nonwildtype status row based MIC disk diffusion values, epidemiological cut-(ECOFF) values. reported new column 'ecoff', coded 'NWT' (nonwildtype) 'WT' (wildtype). FALSE, ECOFF interpretation performed. default_guideline string (default \"EUCAST\"). Default guideline use interpretation via .sir. Allowed values 'EUCAST' 'CLSI'. input file contains column Testing standard, interpret ecoff set TRUE, new column guideline created use interpretation step. Values populated Testing standard, however rows missing/NA values non-allowed values coerced value specified 'default_guideline'. Testing standard column, rows interpreted using default_guideline.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_ncbi_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and process AST data from an NCBI file — import_ncbi_ast","text":"data frame processed AST data, including additional columns: id: biological sample identifier (renamed #BioSample specified column). spp_pheno: species phenotype, formatted using .mo function. drug_agent: antibiotic used test, formatted using .ab function. mic: minimum inhibitory concentration (MIC) value, formatted using .mic function. disk: disk diffusion measurement (mm), formatted using .disk function. guideline: guideline used interpretation (either EUCAST CLSI; taken input column otherwise forced parameter default_guideline). pheno: phenotype interpreted specified breakpoint standard (S//R), based MIC disk diffusion data. ecoff: wildtype/nonwildtype status interpreted ECOFF (WT/NWT), based MIC disk diffusion data.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/import_ncbi_ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and process AST data from an NCBI file — import_ncbi_ast","text":"","code":"# Example usage if (FALSE) { # \\dontrun{ # small example E. coli AST data from NCBI ecoli_ast_raw  # import without re-interpreting resistance pheno <- import_ncbi_ast(ecoli_ast_raw) head(pheno)  # import and re-interpret resistance (S/I/R) and ECOFF (WT/NWT) using AMR package pheno <- import_ncbi_ast(ecoli_ast_raw, interpret = T, ecoff=T) head(pheno) } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/logistf_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Details from a logistf Model — logistf_details","title":"Extract Details from a logistf Model — logistf_details","text":"function extracts formats estimates, confidence intervals, p-values fitted logistf model.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/logistf_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Details from a logistf Model — logistf_details","text":"","code":"logistf_details(model)"},{"path":"https://interpretamr.github.io/AMRgen/reference/logistf_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Details from a logistf Model — logistf_details","text":"model fitted logistf model object.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/logistf_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Details from a logistf Model — logistf_details","text":"tibble containing estimates, confidence intervals, p-values predictor model. Example library(logistf) model <- logistf(R ~ ., data=dat) model_details <- logistf_details(model) autoplot(model_details)","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/merge_logreg_soloppv.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Logistic Regression and Solo PPV Statistics — merge_logreg_soloppv","title":"Merge Logistic Regression and Solo PPV Statistics — merge_logreg_soloppv","text":"function merges logistic regression model statistics solo PPV statistics creates combined plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/merge_logreg_soloppv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Logistic Regression and Solo PPV Statistics — merge_logreg_soloppv","text":"","code":"merge_logreg_soloppv(model, solo_stats, title = NULL)"},{"path":"https://interpretamr.github.io/AMRgen/reference/merge_logreg_soloppv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Logistic Regression and Solo PPV Statistics — merge_logreg_soloppv","text":"model data frame containing logistic regression model statistics. solo_stats data frame containing solo PPV statistics. title optional title plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/merge_logreg_soloppv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Logistic Regression and Solo PPV Statistics — merge_logreg_soloppv","text":"list containing combined data frame plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/merge_logreg_soloppv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Logistic Regression and Solo PPV Statistics — merge_logreg_soloppv","text":"","code":"if (FALSE) { # \\dontrun{ soloPPV_cipro <- solo_ppv_analysis(ecoli_geno, ecoli_ast,                            antibiotic=\"Ciprofloxacin\",                            drug_class_list=c(\"Quinolones\"),                            sir_col=\"pheno\") logistic_cipro <- amr_logistic(ecoli_geno, ecoli_ast,                            \"Ciprofloxacin\", c(\"Quinolones\"), maf=5) allstatsR <- merge_logreg_soloppv(logistic_cipro$modelR,                      soloPPV_cipro$solo_stats %>% filter(category==\"R\"),                      title=\"Quinolone markers vs Cip R\") } # }"},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_combined_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Combined Statistics — plot_combined_stats","title":"Plot Combined Statistics — plot_combined_stats","text":"function creates plot combined logistic regression solo PPV statistics.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_combined_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Combined Statistics — plot_combined_stats","text":"","code":"plot_combined_stats(combined_stats, sig = 0.05, title = NULL)"},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_combined_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Combined Statistics — plot_combined_stats","text":"combined_stats data frame containing combined statistics logistic regression solo PPV. sig significance level logistic regression p-values. Default 0.05. title optional title plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_combined_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Combined Statistics — plot_combined_stats","text":"ggplot2 object representing combined plot.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Estimates from a Table of Results — plot_estimates","title":"Plot Estimates from a Table of Results — plot_estimates","text":"function creates ggplot object visualizing logistic regression coefficients 95% confidence intervals. Significant markers highlighted based specified p-value threshold.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Estimates from a Table of Results — plot_estimates","text":"","code":"plot_estimates(   tbl,   sig = 0.05,   sig_colors = c(`FALSE` = \"grey\", `TRUE` = \"blue4\"),   x_title = \"Coefficient (95% CI)\",   y_title = \"Variant\",   title = NULL,   axis_label_size = 9,   marker_order = NULL )"},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Estimates from a Table of Results — plot_estimates","text":"tbl data frame tibble containing logistic regression results. Expected columns : marker: name marker (e.g., variable name). pval: p-value marker. ci.lower: lower bound confidence interval. ci.upper: upper bound confidence interval. est: estimated coefficient. sig (optional) significance threshold p-values. Defaults 0.05. sig_colors (optional) vector two colors represent significant non-significant estimates. x_title (optional) title x-axis. Defaults \"Coefficient (95% CI)\". y_title (optional) title y-axis. Defaults \"Variant\". title (optional) main title plot. NULL, title added. axis_label_size (optional) font size axis labels. Defaults 9.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Estimates from a Table of Results — plot_estimates","text":"ggplot object showing logistic regression coefficients confidence intervals. Significant markers (p-value < sig) colored differently.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/plot_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Estimates from a Table of Results — plot_estimates","text":"","code":"# Example dataset tbl <- tibble::tibble(   marker = c(\"(Intercept)\", \"var1\", \"var2\", \"var3\"),   pval = c(0.1, 0.03, 0.2, 0.04),   ci.lower = c(-0.2, 0.1, -0.3, 0.2),   ci.upper = c(0.5, 0.8, 0.4, 1.1),   est = c(0.2, 0.5, 0.1, 0.7) )  # Plot plot_estimates(tbl)"},{"path":"https://interpretamr.github.io/AMRgen/reference/solo_ppv_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Solo PPV Analysis for AMR Markers — solo_ppv_analysis","title":"Perform Solo PPV Analysis for AMR Markers — solo_ppv_analysis","text":"function performs Positive Predictive Value (PPV) analysis AMR markers associated given antibiotic drug class. function calculates PPV solo markers (one genetic marker relevant drug class) visualizes results using various plots. returns list containing summary statistics solo marker, associated plots showing breakdown resistance phenotypes, PPV (95% confidence interval) marker.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/solo_ppv_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Solo PPV Analysis for AMR Markers — solo_ppv_analysis","text":"","code":"solo_ppv_analysis(   geno_table,   pheno_table,   antibiotic,   drug_class_list,   geno_sample_col = NULL,   pheno_sample_col = NULL,   sir_col = NULL,   keep_assay_values = TRUE,   min = 1,   axis_label_size = 9,   plot_cols = c(R = \"IndianRed\", I = \"orange\", S = \"lightgrey\", NWT = \"navy\"),   pd = position_dodge(width = 0.8) )"},{"path":"https://interpretamr.github.io/AMRgen/reference/solo_ppv_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Solo PPV Analysis for AMR Markers — solo_ppv_analysis","text":"geno_table data frame containing genotype data, including least one column labeled drug_class drug class information one column sample identifiers (specified via geno_sample_col otherwise assumed first column contains identifiers). pheno_table data frame containing phenotype data, must include column drug_agent (antibiotic information) column resistance interpretation (S//R, colname specified via sir_col). antibiotic character string specifying antibiotic interest filter phenotype data. value must match one entries drug_agent column pheno_table. drug_class_list character vector drug classes filter genotype data markers related specified antibiotic. Markers geno_table filtered based whether drug_class matches value list. geno_sample_col character string (optional) specifying column name geno_table containing sample identifiers. Defaults NULL, case assumed first column contains identifiers. pheno_sample_col character string (optional) specifying column name pheno_table containing sample identifiers. Defaults NULL, case assumed first column contains identifiers. sir_col character string specifying column name pheno_table contains resistance interpretation (SIR) data. values interpretable \"R\" (resistant), \"\" (intermediate), \"S\" (susceptible). min Minimum number genomes solo marker, include marker plot (default 1). plot_cols named vector colors plot. names phenotype categories (e.g., \"R\", \"\", \"S\", \"NWT\"), values valid color names hexadecimal color codes. Default colors provided resistant (\"R\"), intermediate (\"\"), susceptible (\"S\"), non-wild-type (\"NWT\").","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/solo_ppv_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Solo PPV Analysis for AMR Markers — solo_ppv_analysis","text":"list containing following elements: solo_stats dataframe summarizing PPV resistance (R vs S/) NWT (R/vs S), including number positive hits, sample size, PPV, 95% confidence intervals marker. combined_plot combined ggplot object showing PPV plot solo markers, bar plot phenotype distribution. solo_binary dataframe binary values indicating presence absence solo markers. amr_binary dataframe binary values AMR markers, based input genotype phenotype data.","code":""},{"path":"https://interpretamr.github.io/AMRgen/reference/solo_ppv_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Solo PPV Analysis for AMR Markers — solo_ppv_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # import genotype data geno_table <- import_amrfp(ecoli_geno_raw, \"Name\")  # example phenotype data head(ecoli_ast)  soloPPV_cipro <- solo_ppv_analysis(   geno_table = geno_table,   pheno_table = ecoli_ast,   antibiotic = \"Ciprofloxacin\",   drug_class_list = c(\"Quinolones\"),   sir_col = \"Resistance phenotype\" )  # View the results soloPPV_cipro$solo_stats soloPPV_cipro$combined_plot } # }"}]
