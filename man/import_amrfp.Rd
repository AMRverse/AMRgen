% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_amrfp.R
\name{import_amrfp}
\alias{import_amrfp}
\title{Import and Process AMRFinderPlus Results}
\usage{
import_amrfp(input_table, sample_col = "Name", amrfp_drugs = amrfp_drugs_table)
}
\arguments{
\item{input_table}{A character string specifying the path to the AMRFinderPlus results table (TSV format).}

\item{sample_col}{A character string specifying the column that identifies samples in the dataset (default \code{Name}).}

\item{amrfp_drugs}{A tibble containing a reference table mapping AMRFinderPlus subclasses (\code{AFP_Subclass}) to standardised drug agents (\code{drug_agent}) and drug classes (\code{drug_class}). Defaults to \code{amrfp_drugs_table}, which is provided internally.}
}
\value{
A tibble containing the processed AMR elements, with harmonised gene names, mapped drug agents, and drug classes. The output retains the original columns from the AMRFinderPlus table along with the newly mapped variables.
}
\description{
This function imports and processes AMRFinderPlus results, extracting antimicrobial resistance (AMR) elements and mapping them to standardised antibiotic names and drug classes. The function also converts gene symbols to a harmonised format and ensures compatibility with the AMR package.
}
\details{
The function performs the following steps:
\itemize{
\item Reads the AMRFinderPlus output table.
\item Filters the data to only include AMR elements.
\item Converts gene symbols to a harmonised format.
\item Splits multiple subclass annotations into separate rows.
\item Maps AMRFinderPlus subclasses to standardised drug agent and drug class names using \code{amrfp_drugs}.
\item Converts drug agent names to the \code{"ab"} class from the AMR package.
This processing ensures compatibility with downstream AMR analysis workflows.
}
}
\examples{
\dontrun{
# small example E. coli AMRfinderplus data
ecoli_geno_raw

# import first few rows of this data frame and parse it as AMRfp data
geno <- import_amrfp(ecoli_geno_raw \%>\% head(n = 10), "Name")
geno
}
}
